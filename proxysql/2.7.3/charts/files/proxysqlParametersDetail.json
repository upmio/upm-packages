[
  {
    "key": "restart_on_missing_heartbeats",
    "scope": "Global",
    "section": "general",
    "type": "integer",
    "dynamic": false,
    "range": "0 - 31536000",
    "default": "10",
    "desc_en": "if MySQL threads miss restart_on_missing_heartbeats heartbeats, ProxySQL will raise a SIGABRT signal and restart. Its default value is 10.",
    "desc_zh": "如果MySQL线程错过Restart_on_missing_heartBeats心跳，则ProxySQL将引起sigabrt信号并重新启动。它的默认值为10。"
  },
  {
    "key": "debug",
    "scope": "Global",
    "section": "admin",
    "type": "boolean",
    "dynamic": false,
    "range": "[\"false\",\"true\"]",
    "default": "false",
    "desc_en": "This variable enables the debugging in proxysql binaries built in debug mode. Note that this variable is only present in debug builds, therefore you shouldn’t see this variable in a production environment.",
    "desc_zh": "此变量在调试模式下构建的proxysql二进制文件中启用调试。请注意，此变量仅存在于调试构建中，因此您不应该在生产环境中看到此变量。"
  },
  {
    "key": "refresh_interval",
    "scope": "Global",
    "section": "admin",
    "type": "integer",
    "dynamic": true,
    "range": "100 - 100000",
    "default": "2000",
    "desc_en": "In very old versions this variable defined the refresh interval (in milliseconds) for updates to the query rules statistics and commands counters statistics. Now this variable only defines the timeout for poll() calls, thus for how long an Admin connection can be blocked waiting for a network event.",
    "desc_zh": "在非常旧的版本中，此变量定义了更新查询规则统计信息和命令计数器统计信息的刷新间隔（以毫秒为单位）。现在，此变量仅定义了poll()调用的超时时间，因此Admin连接可以在等待网络事件时被阻止多长时间。"
  },
  {
    "key": "prometheus_memory_metrics_interval",
    "scope": "Global",
    "section": "admin",
    "type": "integer",
    "dynamic": true,
    "range": "0 - 1200",
    "default": "61",
    "desc_en": "ProxySQL has a built-in Prometheus Exporter that is able to export statistics when the REST API is enabled. Metrics are collected all the time no matter if the REST API is enabled or not. While some metrics are collected and refreshed in real time, some metrics (currently only memory metrics) are collected and refreshed only at regular intervals defined by admin-prometheus_memory_metrics_interval .",
    "desc_zh": "ProxySQL具有内置的Prometheus导出器，可以在启用REST API时导出统计信息。无论是否启用REST API，都会一直收集指标。虽然某些指标是实时收集和刷新的，但某些指标（目前仅为内存指标）仅在由admin-prometheus_memory_metrics_interval定义的常规间隔中收集和刷新。"
  },
  {
    "key": "read_only",
    "scope": "Global",
    "section": "admin",
    "type": "boolean",
    "dynamic": true,
    "range": "[\"false\",\"true\"]",
    "default": "false",
    "desc_en": "When this variable is set to true and loaded at runtime, the Admin module does not accept writes anymore. This is useful to ensure that ProxySQL cannot be further configured.When ProxySQL Admin is in read-only mode, the only way to revert it to read-write and set admin-read_only to false at runtime (and therefore also make the Admin module writable again) is to run the command PROXYSQL READWRITE.",
    "desc_zh": "当此变量设置为true并在运行时加载时，Admin模块不再接受写入。这对于确保无法进一步配置ProxySQL很有用。当ProxySQL Admin处于只读模式时，将其恢复为读写并在运行时将admin-read_only设置为false（因此还使Admin模块可写）的唯一方法是运行命令PROXYSQL READWRITE。"
  },
  {
    "key": "poll_timeout",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "10 - 20000",
    "default": "2000",
    "desc_en": "The minimal timeout used by the proxy in order to detect incoming/outgoing traffic via the poll() system call. If the proxy determines that it should stick to a higher timeout because of its internal computations, it will use that one, but it will never use a value less than this one.",
    "desc_zh": "代理用于通过poll()系统调用检测传入/传出流量的最小超时。如果代理确定由于其内部计算而应该坚持较高的超时，则它将使用该超时，但它永远不会使用小于此值的值。"
  },
  {
    "key": "poll_timeout_on_failure",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "10 - 20000",
    "default": "100",
    "desc_en": "The timeout used in order to detect incoming/outgoing traffic after a connection error has occurred. The proxy automatically tweaks its timeout to a lower value in such an event in order to be able to quickly respond with a valid connection.",
    "desc_zh": "在连接错误发生后，用于检测传入/传出流量的超时。代理在这种情况下会自动将超时调整为较低的值，以便能够快速响应有效连接。"
  },
  {
    "key": "stacksize",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": false,
    "range": "262144 - 4194304",
    "default": "1048576",
    "desc_en": "The stack size to be used with the background threads that the proxy uses to handle MySQL traffic and connect to the backends. Note that changing this value has no effect at runtime, if you need to change it you have to restart the proxy.",
    "desc_zh": "用于处理MySQL流量并连接到后端的代理使用的后台线程的堆栈大小。请注意，如果需要更改此值，则在运行时不会产生任何效果，您必须重新启动代理。"
  },
  {
    "key": "threshold_query_length",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "1024 - 1073741824",
    "default": "524288",
    "desc_en": "The maximal size of an incoming SQL query to the proxy that will mark the background MySQL connection as non-reusable. This will force the proxy to open a new connection to the backend server, in order to make sure that the memory footprint of the server stays within reasonable limits. ",
    "desc_zh": "标记后台MySQL连接为不可重用的传入SQL查询到代理的最大大小。这将强制代理打开到后端服务器的新连接，以确保服务器的内存占用保持在合理范围内。"
  },
  {
    "key": "threshold_resultset_size",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "1024 - 1073741824",
    "default": "4194304",
    "desc_en": "If a resultset returned by a backend server is bigger than this, ProxySQL will start sending the result to the MySQL client that was requesting the result in order to limit its memory footprint. \n This threshold is also used to throttle data reading from backend connections. If this threshold is exceeded 8 times during resultset reading in a backend connection, resultset reading will be temporarily paused. Pausing will continue until the buffered data by the session is less than 4 times this threshold. When this buffered data (to be sent to the client) goes below the previously mentioned threshold (4 times this threshold), resultset reading from the session backend connection will be resumed.",
    "desc_zh": "如果后端服务器返回的结果集大于此值，ProxySQL将开始将结果发送到请求结果的MySQL客户端，以限制其内存占用。此阈值还用于限制从后端连接读取数据。如果在后端连接中的结果集读取过程中超过了此阈值8次，则结果集读取将暂时暂停。暂停将继续，直到会话缓冲的数据少于此阈值的4倍。当此缓冲数据（要发送到客户端）低于先前提到的阈值（此值的4倍）时，将恢复从会话后端连接读取结果集。"
  },
  {
    "key": "default_schema",
    "scope": "Global",
    "section": "mysql",
    "type": "string",
    "dynamic": true,
    "range": "",
    "default": "information_schema",
    "desc_en": "The default schema to be used for incoming MySQL client connections which do not specify a schema name. This variable is required because ProxySQL doesn’t allow connections without a schema. Please note that this is a important difference compared to connecting directly to a MySQL server: MySQL allows a client to be connected without a default schema, while ProxySQL doesn’t allow that, therefore it needs a default one.",
    "desc_zh": "用于未指定模式名称的传入MySQL客户端连接的默认模式。此变量是必需的，因为ProxySQL不允许没有模式的连接。请注意，这与直接连接到MySQL服务器的连接相比是一个重要的区别：MySQL允许客户端连接而不指定默认模式，而ProxySQL不允许这样做，因此它需要一个默认模式。"
  },
  {
    "key": "max_connections",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "1 - 1000000",
    "default": "2048",
    "desc_en": "The maximum number of client connections that the proxy can handle. After this number is reached, new connections will be rejected with the #HY000 error, and the error message Too many connections.",
    "desc_zh": "代理可以处理的客户端连接的最大数量。达到此数字后，新连接将被拒绝，并显示错误消息太多连接。"
  },
  {
    "key": "default_query_delay",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "0 - 3600000",
    "default": "0",
    "desc_en": "This variable allows to create a simple throttling mechanism, delaying the excution of queries to the backends. Setting this variable to a non-zero value (in miliseconds) will delay the execution of all queries, globally. There is a more fine-grained throttling mechanism in the admin table mysql_query_rules, where for each rule there can be one delay that is applied to all queries matching the rule. If a delay is specified in mysql_query_rules.delay, the global value mysql-default_query_delay is ignored. This variable can be useful in emergency situation when a user can decide to back-off traffic from backends simply delaying the execution of every query.",
    "desc_zh": "此变量允许创建一个简单的限流机制，延迟对后端的查询执行。将此变量设置为非零值（以毫秒为单位）将延迟所有查询的执行，全局。在admin表mysql_query_rules中有一个更精细的限流机制，对于每个规则，可以有一个应用于匹配规则的所有查询的延迟。如果在mysql_query_rules.delay中指定了延迟，则全局值mysql-default_query_delay将被忽略。在紧急情况下，此变量可能很有用，用户可以决定简单地延迟每个查询的执行以减少后端流量。"
  },
  {
    "key": "default_query_timeout",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "1000 - 1728000000",
    "default": "86400000",
    "desc_en": "ProxySQL is able to track the execution time of every query that has sent to the backend, and is able to timeout such queries if they run for too long. \n The default value for mysql-default_query_timeout is 86400000 milliseconds, equivalent to 24 hours. When the timeout is reached, ProxySQL spawn a separate thread that connects to the backend and runs a KILL query in order to stop the query from running in the backend. After that, ProxySQL will return an error to the client. Please note that when ProxySQL interrupts the execution of a query because of a timeout, the retry mechanism for queries is automatically disabled and ProxySQL will not retry to execute the killed query.",
    "desc_zh": "ProxySQL能够跟踪发送到后端的每个查询的执行时间，并且能够在运行时间过长时超时这些查询。mysql-default_query_timeout的默认值为86400000毫秒，相当于24小时。达到超时时间后，ProxySQL会生成一个单独的线程，该线程连接到后端并运行一个KILL查询，以停止后端中的查询运行。之后，ProxySQL将向客户端返回错误。请注意，当ProxySQL因超时而中断查询的执行时，查询的重试机制会自动禁用，并且ProxySQL不会重试执行被终止的查询。"
  },
  {
    "key": "connect_timeout_server",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "10 - 120000",
    "default": "1000",
    "desc_en": "The timeout for a single attempt at connecting to a backend server from proxysql. If this fails, proxysql will try to reconnect according to parameters mysql-connect_retries_on_failure and mysql-connect_retries_delay . If none of the server in the destination hostgroup is reachable after mysql-connect_timeout_server_max milliseconds, an error is returned to the client. See mysql-connect_timeout_server_max for further details. We believe that the default value of 1000 milliseconds is already a big value: if proxysql and a backend aren’t able to fully establish a connection after 1000 milliseconds, there is either a network issue or the backend is overloaded and unable to quickly create a connection. Therefore if a connection isn’t established quickly it is a warning signal. Nonetheless, some users prefer to increase mysql-connect_timeout_server a bit higher, allowing connections to be established to a generally slow backend.",
    "desc_zh": "从proxysql连接到后端服务器的单次尝试超时。如果失败，proxysql将根据参数mysql-connect_retries_on_failure和mysql-connect_retries_delay尝试重新连接。如果在mysql-connect_timeout_server_max毫秒后目标主机组中的任何服务器都无法访问，则向客户端返回错误。有关更多详细信息，请参见mysql-connect_timeout_server_max。我们认为1000毫秒的默认值已经是一个很大的值：如果proxysql和后端在1000毫秒后仍无法完全建立连接，则可能存在网络问题或后端过载且无法快速创建连接。因此，如果连接不能快速建立，这是一个警告信号。尽管如此，一些用户更喜欢将mysql-connect_timeout_server增加到更高一点，以允许连接到通常较慢的后端建立连接。"
  },
  {
    "key": "connect_retries_on_failure",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "0 - 1000",
    "default": "10",
    "desc_en": "The number of times for which a reconnect should be attempted in case of an error, timeout, or any other event that led to an unsuccessful connection to a backend MySQL server.",
    "desc_zh": "在发生错误，超时或导致无法连接到后端MySQL服务器的任何其他事件的情况下，应尝试重新连接的次数。"
  },
  {
    "key": "ping_interval_server_msec",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "1000 - 604800000",
    "default": "10000",
    "desc_en": "The interval at which the proxy should ping backend connections in order to maintain them alive, even though there is no outgoing traffic. The purpose here is to keep some connections alive in order to reduce the latency of new queries towards a less frequently used destination backend server.",
    "desc_zh": "代理应该对后端连接进行ping以保持其活动状态的间隔，即使没有传出流量。这里的目的是保持一些连接活动，以减少对不经常使用的目标后端服务器的新查询的延迟。"
  },
  {
    "key": "ping_timeout_server",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "10 - 600000",
    "default": "200",
    "desc_en": "The proxy internally pings the connections it has opened in order to keep them alive. This eliminates the cost of opening a new connection towards a hostgroup when a query needs to be routed, at the cost of additional memory footprint inside the proxy and some extra traffic. This is the timeout allowed for those pings to succeed.",
    "desc_zh": "代理内部对其已打开的连接进行ping，以保持其活动状态。这消除了在需要路由查询时向主机组打开新连接的成本，但增加了代理内部的额外内存占用和一些额外流量。这是允许这些ping成功的超时时间。"
  },
  {
    "key": "commands_stats",
    "scope": "Global",
    "section": "mysql",
    "type": "boolean",
    "dynamic": true,
    "range": "[\"false\",\"true\"]",
    "default": "true",
    "desc_en": "The delay (in milliseconds) before trying to reconnect after a failed attempt to a backend MySQL server. Failed attempts can take place due to numerous reasons: too busy backend, timed out for the current attempt, etc. Connections will be retried for mysql-connect_retries_on_failure times.",
    "desc_zh": "在尝试连接到后端MySQL服务器失败后重新连接之前的延迟（以毫秒为单位）。由于多种原因，连接尝试可能失败：后端太忙，当前尝试超时等。连接将重试mysql-connect_retries_on_failure次。"
  },
  {
    "key": "sessions_sort",
    "scope": "Global",
    "section": "mysql",
    "type": "boolean",
    "dynamic": true,
    "range": "[\"false\",\"true\"]",
    "default": "true",
    "desc_en": "Sessions are conversations between a MySQL client and a backend server in the proxy. Sessions are generally processed in a stable order but in certain scenarios (like using a transaction workload, which makes sessions bind to certain MySQL connections from the pool), processing them in the same order leads to starvation. This variable controls whether sessions should be processed in the order of waiting time, in order to have a more balanced distribution of traffic among sessions.",
    "desc_zh": "会话是 MySQL 客户端与代理中的后端服务器之间的对话。会话通常以稳定的顺序处理，但在某些情况下（例如使用事务工作负载，使会话绑定到池中的某些 MySQL 连接），以相同的顺序处理它们会导致资源匮乏。此变量控制是否应按等待时间的顺序处理会话，以便在会话之间更均衡地分配流量。"
  },
  {
    "key": "monitor_enabled",
    "scope": "Global",
    "section": "mysql",
    "type": "boolean",
    "dynamic": true,
    "range": "[\"false\",\"true\"]",
    "default": "true",
    "desc_en": "It enables or disables MySQL Monitor.",
    "desc_zh": "它启用或禁用MySQL监视器。"
  },
  {
    "key": "monitor_history",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "1000 - 604800000",
    "default": "600000",
    "desc_en": "The duration for which the events for the checks made by the Monitor module are kept. Such events include connecting to backend servers (to check for connectivity issues), querying them with a simple query (in order to check that they are running correctly) or checking their replication lag.",
    "desc_zh": "监视器模块检查事件的持续时间。这些事件包括连接到后端服务器（以检查连接问题），使用简单查询查询它们（以检查它们是否正确运行）或检查它们的复制延迟。"
  },
  {
    "key": "monitor_connect_interval",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "100 - 604800000",
    "default": "120000",
    "desc_en": "The interval at which the Monitor module of the proxy will try to connect to all the MySQL servers in order to check whether they are available or not.",
    "desc_zh": "代理的监视器模块尝试连接到所有MySQL服务器以检查它们是否可用的间隔。"
  },
  {
    "key": "monitor_connect_timeout",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "100 - 600000",
    "default": "200",
    "desc_en": "Connection timeout in milliseconds.",
    "desc_zh": "连接超时（以毫秒为单位）。"
  },
  {
    "key": "monitor_ping_interval",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "100 - 604800000",
    "default": "8000",
    "desc_en": "The interval at which the Monitor module should ping the backend servers by using the mysql_ping API.",
    "desc_zh": "监视器模块应使用mysql_ping API对后端服务器进行ping的间隔。"
  },
  {
    "key": "monitor_read_only_interval",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "1000",
    "default": "100 - 604800000",
    "desc_en": "Defines the frequency to check the Read Only status of a backend server (in milliseconds).",
    "desc_zh": "定义检查后端服务器的只读状态的频率（以毫秒为单位）。"
  },
  {
    "key": "monitor_read_only_timeout",
    "scope": "Global",
    "section": "mysql",
    "type": "integer",
    "dynamic": true,
    "range": "100 - 600000",
    "default": "800",
    "desc_en": "The timeout for a single attempt at checking the Read Only status on a backend server from the proxy.",
    "desc_zh": "代理检查后端服务器的只读状态的单次尝试的超时。"
  }
]
